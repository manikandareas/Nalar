import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  // CORE USER MANAGEMENT
  users: defineTable({
    username: v.string(),
    email: v.string(),
    userId: v.string(), // Clerk userId
    profileImage: v.optional(v.string()),
    alreadyOnboarded: v.boolean(),
    learningStyle: v.union(
      v.literal("visual"),
      v.literal("auditory"),
      v.literal("kinesthetic"),
      v.literal("mixed")
    ),
    preferences: v.any(), // Flexible JSON for UI preferences, notifications
  }).index("by_user_id", ["userId"]),

  // USER LEARNING PROFILE
  user_profiles: defineTable({
    userId: v.id("users"),
    learningGoals: v.array(v.string()), // Array of subjects/topics
    overallLevel: v.number(), // 1-10 skill level
    strengths: v.array(v.string()),
    weaknesses: v.array(v.string()),
    studyStreak: v.number(), // Consecutive days
    streakStartDate: v.number(),
    learningPreferences: v.any(), // Explanation types, difficulty
    updatedAt: v.number(),
  })
    .index("by_userId", ["userId"]),

  // SUBJECT AND TOPIC HIERARCHY
  subjects: defineTable({
    name: v.string(), // Mathematics, Physics, etc
    description: v.string(),
    iconUrl: v.optional(v.string()),
    difficultyLevel: v.number(), // 1-5
    isActive: v.boolean(),
  })
    .index("by_name", ["name"]),

  topics: defineTable({
    subjectId: v.id("subjects"),
    parentTopicId: v.optional(v.id("topics")), // For hierarchical structure
    name: v.string(), // Calculus, Algebra, etc
    description: v.string(),
    prerequisites: v.array(v.id("topics")), // Array of required topic_ids
    estimatedDuration: v.number(), // Minutes to complete
    difficultyLevel: v.number(), // 1-10
    learningObjectives: v.array(v.string()),
    isActive: v.boolean(),
  })
    .index("by_subjectId", ["subjectId"])
    .index("by_parentTopicId", ["parentTopicId"]),

  // LEARNING CONTENT STRUCTURE
  learning_content: defineTable({
    topicId: v.id("topics"),
    contentType: v.union(
      v.literal("explanation"),
      v.literal("example"),
      v.literal("practice"),
      v.literal("assessment")
    ),
    title: v.string(),
    contentText: v.string(), // Main content
    contentMedia: v.any(), // Images, videos, diagrams
    aiPrompts: v.any(), // Prompts for AI generation
    difficultyLevel: v.number(), // 1-10
    metadata: v.any(), // Tags, keywords
    isActive: v.boolean(),
    updatedAt: v.number(),
  })
    .index("by_topicId", ["topicId"])
    .index("by_contentType", ["contentType"]),

  // USER LEARNING PROGRESS
  user_topic_progress: defineTable({
    userId: v.id("users"),
    topicId: v.id("topics"),
    status: v.union(
      v.literal("not_started"),
      v.literal("in_progress"),
      v.literal("completed"),
      v.literal("mastered")
    ),
    completionPercentage: v.number(), // 0-100
    currentLevel: v.number(), // 1-10
    masteryIndicators: v.any(), // Specific skills mastered
    startedAt: v.number(),
    completedAt: v.optional(v.number()),
    lastAccessed: v.number(),
    totalTimeSpent: v.number(), // Minutes
  })
    .index("by_userId_topicId", ["userId", "topicId"]),

  // LEARNING SESSIONS
  learning_sessions: defineTable({
    userId: v.id("users"),
    topicId: v.id("topics"),
    sessionType: v.union(
      v.literal("study"),
      v.literal("practice"),
      v.literal("assessment"),
      v.literal("chat")
    ),
    startTime: v.number(),
    endTime: v.number(),
    durationMinutes: v.number(),
    activities: v.array(v.any()), // Array of activities in session
    aiInteractions: v.any(), // Chat history, questions asked
    engagementScore: v.number(), // 0-1
    outcomes: v.any(), // What was learned/achieved
  })
    .index("by_userId", ["userId"])
    .index("by_topicId", ["topicId"]),

  // AI CHAT INTERACTIONS
  chat_conversations: defineTable({
    userId: v.id("users"),
    topicId: v.optional(v.id("topics")), // Optional, if topic-specific
    title: v.string(), // Auto-generated or user-defined
    updatedAt: v.number(),
    isArchived: v.boolean(),
  })
    .index("by_userId", ["userId"])
    .index("by_topicId", ["topicId"]),

  chat_messages: defineTable({
    conversationId: v.id("chat_conversations"),
    senderType: v.union(v.literal("user"), v.literal("ai")),
    messageContent: v.string(),
    messageMetadata: v.any(), // Timestamp, tokens used, etc
    aiResponseData: v.any(), // AI model info, confidence
    isHelpful: v.optional(v.boolean()), // User feedback
  })
    .index("by_conversationId", ["conversationId"]),

  // ASSESSMENT AND EVALUATION
  assessments: defineTable({
    topicId: v.id("topics"),
    assessmentType: v.union(
      v.literal("pre_test"),
      v.literal("quiz"),
      v.literal("final_test"),
      v.literal("adaptive")
    ),
    title: v.string(),
    description: v.string(),
    questions: v.array(),
    totalPoints: v.number(),
    timeLimitMinutes: v.number(),
    gradingCriteria: v.any(),
    isActive: v.boolean(),
  })
    .index("by_topicId", ["topicId"]),

  user_assessment_attempts: defineTable({
    userId: v.id("users"),
    assessmentId: v.id("assessments"),
    responses: v.any(), // User answers
    results: v.any(), // Scores, feedback
    scorePercentage: v.number(),
    timeTakenMinutes: v.number(),
    aiFeedback: v.any(),
    startedAt: v.number(),
    completedAt: v.number(),
    isCompleted: v.bool(),
  })
    .index("by_userId", ["userId"])
    .index("by_assessmentId", ["assessmentId"]),

  // PRACTICE PROBLEMS
  practice_problems: defineTable({
    topicId: v.id("topics"),
    problemType: v.union(
      v.literal("multiple_choice"),
      v.literal("open_ended"),
      v.literal("step_by_step")
    ),
    problemStatement: v.string(),
    problemData: v.any(), // Images, equations, etc
    correctAnswer: v.any(),
    solutionSteps: v.any(), // Step-by-step solution
    difficultyLevel: v.number(), // 1-10
    hints: v.array(v.string()), // Array of progressive hints
    metadata: v.any(), // Tags, concepts tested
    isActive: v.boolean(),
  })
    .index("by_topicId", ["topicId"]),

  user_practice_attempts: defineTable({
    userId: v.id("users"),
    problemId: v.id("practice_problems"),
    userResponse: v.any(),
    isCorrect: v.boolean(),
    hintsUsed: v.number(),
    timeTakenSeconds: v.number(),
    aiFeedback: v.any(),
    understandingScore: v.number(), // 0-1
    attemptedAt: v.number(),
  })
    .index("by_userId", ["userId"])
    .index("by_problemId", ["problemId"]),

  // STUDY PLANNING
  study_plans: defineTable({
    userId: v.id("users"),
    title: v.string(),
    goals: v.any(), // Learning objectives
    startDate: v.number(),
    targetEndDate: v.number(),
    schedule: v.any(), // Weekly/daily schedule
    status: v.union(
      v.literal("active"),
      v.literal("paused"),
      v.literal("completed")
    ),
    updatedAt: v.number(),
  })
    .index("by_userId", ["userId"]),

  study_sessions_planned: defineTable({
    planId: v.id("study_plans"),
    topicId: v.id("topics"),
    scheduledStart: v.number(),
    plannedDurationMinutes: v.number(),
    sessionType: v.union(
      v.literal("study"),
      v.literal("practice"),
      v.literal("review")
    ),
    status: v.union(
      v.literal("scheduled"),
      v.literal("completed"),
      v.literal("missed"),
      v.literal("rescheduled")
    ),
    updatedAt: v.number(),
  })
    .index("by_planId", ["planId"])
    .index("by_topicId", ["topicId"]),

  // USER ACHIEVEMENTS AND GAMIFICATION
  achievements: defineTable({
    name: v.string(),
    description: v.string(),
    iconUrl: v.optional(v.string()),
    criteria: v.any(), // Requirements to unlock
    pointsReward: v.number(),
    category: v.union(
      v.literal("streak"),
      v.literal("mastery"),
      v.literal("participation"),
      v.literal("improvement")
    ),
    isActive: v.boolean(),
  })
    .index("by_category", ["category"]),

  user_achievements: defineTable({
    userId: v.id("users"),
    achievementId: v.id("achievements"),
    earnedAt: v.number(),
    metadata: v.any(), // Context when earned
  })
    .index("by_userId", ["userId"])
    .index("by_achievementId", ["achievementId"]),

  // ANALYTICS AND INSIGHTS
  user_analytics: defineTable({
    userId: v.id("users"),
    analyticsDate: v.number(),
    dailyMetrics: v.any(), // Study time, topics covered, etc
    performanceMetrics: v.any(), // Accuracy, improvement
    engagementMetrics: v.any(), // Session count, duration
    aiUsageMetrics: v.any(), // Chat interactions, questions
  })
    .index("by_userId_date", ["userId", "analyticsDate"]),

  // SYSTEM CONFIGURATION
  system_settings: defineTable({
    settingKey: v.string(),
    settingValue: v.any(),
    description: v.string(),
    updatedAt: v.number(),
  })
    .index("by_settingKey", ["settingKey"]),
});